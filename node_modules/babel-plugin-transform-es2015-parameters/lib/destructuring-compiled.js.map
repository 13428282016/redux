{"version":3,"sources":["destructuring.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,uBAAuB,GAAG,OAAO,CAAC,gDAAgD,CAAC,CAAC,SAAS,CAAC,CAAC;;AAEnG,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;;AAE1B,IAAI,WAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;AAEzC,IAAI,CAAC,GAAG,uBAAuB,CAAC,WAAW,CAAC,CAAC;;AAE7C,IAAI,OAAO,GAAG;AACZ,UAAQ,EAAE,SAAS,QAAQ,CAAC,IAAI,EAAE;AAChC,QAAI,kBAAM,GAAe,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;;;;AAAC,AAI5C,QAAI,UAAU,GAAG,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACpE,QAAI,kBAAkB,GAAG,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC;;AAEpD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,EAAE,CAAC,EAAE,EAAE;AAC3C,UAAI,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACtB,UAAI,KAAK,CAAC,cAAc,EAAE,IAAI,KAAK,CAAC,eAAe,EAAE,EAAE;AACrD,YAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;;AAElD,YAAI,MAAM,GAAG,CAAC,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACnF,cAAM,CAAC,WAAW,GAAG,kBAAkB,GAAG,CAAC,CAAC;;AAE5C,YAAI,CAAC,WAAW,EAAE,CAAC;AACnB,YAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;;AAElD,aAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;OACxB;KACF;GACF;CACF,CAAC;AACF,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC","file":"destructuring-compiled.js","sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"];\n\nexports.__esModule = true;\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nvar visitor = {\n  Function: function Function(path) {\n    var params /*: Array*/ = path.get(\"params\");\n\n    // If there's a rest param, no need to loop through it. Also, we need to\n    // hoist one more level to get `declar` at the right spot.\n    var hoistTweak = t.isRestElement(params[params.length - 1]) ? 1 : 0;\n    var outputParamsLength = params.length - hoistTweak;\n\n    for (var i = 0; i < outputParamsLength; i++) {\n      var param = params[i];\n      if (param.isArrayPattern() || param.isObjectPattern()) {\n        var uid = path.scope.generateUidIdentifier(\"ref\");\n\n        var declar = t.variableDeclaration(\"let\", [t.variableDeclarator(param.node, uid)]);\n        declar._blockHoist = outputParamsLength - i;\n\n        path.ensureBlock();\n        path.get(\"body\").unshiftContainer(\"body\", declar);\n\n        param.replaceWith(uid);\n      }\n    }\n  }\n};\nexports.visitor = visitor;"]}