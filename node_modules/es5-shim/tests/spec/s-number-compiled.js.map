{"version":3,"sources":["s-number.js"],"names":[],"mappings":"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","file":"s-number-compiled.js","sourcesContent":["/* global describe, it, expect */\n\ndescribe('Number', function () {\n    'use strict';\n\n    describe('#toFixed()', function () {\n        it('should convert numbers correctly', function () {\n            expect((0.00008).toFixed(3)).toBe('0.000');\n            expect((0.9).toFixed(0)).toBe('1');\n            expect((1.255).toFixed(2)).toBe('1.25');\n            expect((1843654265.0774949).toFixed(5)).toBe('1843654265.07749');\n            expect((1000000000000000128).toFixed(0)).toBe('1000000000000000128');\n        });\n    });\n\n    describe('#toPrecision()', function () {\n        // the spec allows for this test to fail.\n        it('throws a RangeError when < 1 or > 21', function () {\n            expect(function () { return (0.9).toPrecision(0); }).toThrow();\n            // Firefox allows values up to 100\n            expect(function () { return (0.9).toPrecision(101); }).toThrow();\n        });\n\n        it('works as expected', function () {\n\t\t\texpect((0.00008).toPrecision(3)).toBe('0.0000800');\n\t\t\texpect((1.255).toPrecision(2)).toBe('1.3');\n\t\t\texpect((1843654265.0774949).toPrecision(13)).toBe('1843654265.077');\n            expect(NaN.toPrecision(1)).toBe('NaN');\n        });\n\n        it('works with an undefined precision', function () {\n            var num = 123.456;\n            expect(num.toPrecision()).toBe(String(num));\n            expect(num.toPrecision(undefined)).toBe(String(num));\n        });\n    });\n\n    describe('constants', function () {\n        it('should have MAX_VALUE', function () {\n            expect(Number.MAX_VALUE).toBe(1.7976931348623157e308);\n        });\n\n        it('should have MIN_VALUE', function () {\n            expect(Number.MIN_VALUE).toBe(5e-324);\n        });\n\n        it('should have NaN', function () {\n            expect(Number.NaN).not.toBe(Number.NaN);\n        });\n\n        it('should have POSITIVE_INFINITY', function () {\n            expect(Number.POSITIVE_INFINITY).toBe(Infinity);\n        });\n\n        it('should have NEGATIVE_INFINITY', function () {\n            expect(Number.NEGATIVE_INFINITY).toBe(-Infinity);\n        });\n    });\n});\n"]}