{"version":3,"sources":["s-regexp.js"],"names":[],"mappings":";;AAEA,QAAQ,CAAC,QAAQ,EAAE,YAAY;AAC3B,gBAAY,CAAC;;AAEb,YAAQ,CAAC,aAAa,EAAE,YAAY;AAChC,gBAAQ,CAAC,UAAU,EAAE,YAAY;AAC/B,cAAE,CAAC,kDAAkD,EAAE,YAAY;AAC/D,sBAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC5C,sBAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9C,sBAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAChD,sBAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAChD,sBAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aACrD,CAAC,CAAC;SACJ,CAAC,CAAC;;AAEH,gBAAQ,CAAC,SAAS,EAAE,YAAY;AAC9B,cAAE,CAAC,kDAAkD,EAAE,YAAY;AAC/D,sBAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACxD,sBAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAC9D,sBAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAChE,sBAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AAChE,sBAAM,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aACrE,CAAC,CAAC;SACJ,CAAC,CAAC;KACN,CAAC,CAAC;CACN,CAAC,CAAC","file":"s-regexp-compiled.js","sourcesContent":["/* global describe, it, expect */\n\ndescribe('RegExp', function () {\n    'use strict';\n\n    describe('#toString()', function () {\n        describe('literals', function () {\n          it('should return correct flags and in correct order', function () {\n              expect(String(/pattern/)).toBe('/pattern/');\n              expect(String(/pattern/i)).toBe('/pattern/i');\n              expect(String(/pattern/mi)).toBe('/pattern/im');\n              expect(String(/pattern/im)).toBe('/pattern/im');\n              expect(String(/pattern/mgi)).toBe('/pattern/gim');\n          });\n        });\n\n        describe('objects', function () {\n          it('should return correct flags and in correct order', function () {\n              expect(String(new RegExp('pattern'))).toBe('/pattern/');\n              expect(String(new RegExp('pattern', 'i'))).toBe('/pattern/i');\n              expect(String(new RegExp('pattern', 'mi'))).toBe('/pattern/im');\n              expect(String(new RegExp('pattern', 'im'))).toBe('/pattern/im');\n              expect(String(new RegExp('pattern', 'mgi'))).toBe('/pattern/gim');\n          });\n        });\n    });\n});\n"]}