{"version":3,"sources":["s-string.js"],"names":[],"mappings":";;AAEA,QAAQ,CAAC,QAAQ,EAAE,YAAY;AAC3B,gBAAY,CAAC;;AAEb,YAAQ,CAAC,SAAS,EAAE,YAAY;AAC5B,YAAI,IAAI,GAAG,2SAA2S,CAAC;;AAEvT,UAAE,CAAC,0BAA0B,EAAE,YAAY;AACvC,kBAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC1C,kBAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACvC,CAAC,CAAC;;AAEH,UAAE,CAAC,oCAAoC,EAAE,YAAY;AACjD,kBAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACvC,kBAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC1C,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,YAAQ,CAAC,YAAY,EAAE,YAAY;AAC/B,UAAE,CAAC,4CAA4C,EAAE,YAAY;AACzD,gBAAI,MAAM,GAAG,EAAE,CAAC;AAChB,eAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,UAAU,CAAC,EAAE,KAAK,EAAE;AACtC,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC;AAAC,aACtB,CAAC,CAAC;AACH,kBAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9B,kBAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;SACrC,CAAC,CAAC;;AAEH,UAAE,CAAC,4BAA4B,EAAE,YAAY;AACzC,kBAAM,CAAC,YAAY;AACf,uBAAO,8BAA8B,CAAC,OAAO,CACzC,0FAA0F,EAC1F,UAAU,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AAAE,2BAAO,MAAM,GAAG,EAAE,GAAG,SAAS,CAAC;iBAAE,CACvE,CAAC;aACL,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;SACpB,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,YAAQ,CAAC,UAAU,EAAE,YAAY;AAC7B,YAAI,IAAI,GAAG,IAAI,CAAC;;AAEhB,UAAE,CAAC,+EAA+E,EAAE,YAAY;AAC5F,kBAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;AACrC,kBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SAC9C,CAAC,CAAC;;AAEH,UAAE,CAAC,sEAAsE,EAAE,YAAY;AACnF,kBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SAC7C,CAAC,CAAC;;AAEH,gBAAQ,CAAC,4BAA4B,EAAE,YAAY;AAC/C,cAAE,CAAC,4BAA4B,EAAE,YAAY;AACzC,sBAAM,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACpC,CAAC,CAAC;AACH,cAAE,CAAC,+BAA+B,EAAE,YAAY;AAC5C,sBAAM,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACvC,CAAC,CAAC;AACH,cAAE,CAAC,8BAA8B,EAAE,YAAY;AAC3C,sBAAM,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACtC,CAAC,CAAC;AACH,cAAE,CAAC,+BAA+B,EAAE,YAAY;AAC5C,sBAAM,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACvC,CAAC,CAAC;AACH,cAAE,CAAC,uCAAuC,EAAE,YAAY;AACpD,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;aAC/C,CAAC,CAAC;AACH,cAAE,CAAC,yCAAyC,EAAE,YAAY;AACtD,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aACjD,CAAC,CAAC;AACH,cAAE,CAAC,0CAA0C,EAAE,YAAY;AACvD,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aAClD,CAAC,CAAC;AACH,cAAE,CAAC,2CAA2C,EAAE,YAAY;AACxD,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aACnD,CAAC,CAAC;AACH,cAAE,CAAC,8CAA8C,EAAE,YAAY;AAC3D,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aACtD,CAAC,CAAC;AACH,cAAE,CAAC,kDAAkD,EAAE,YAAY;AAC/D,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAC1D,CAAC,CAAC;AACH,cAAE,CAAC,oCAAoC,EAAE,YAAY;AACjD,sBAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;aAC5C,CAAC,CAAC;AACH,cAAE,CAAC,4CAA4C,EAAE,YAAY;AACzD,sBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aACpD,CAAC,CAAC;AACH,cAAE,CAAC,+CAA+C,EAAE,YAAY;AAC5D,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aACvD,CAAC,CAAC;AACH,cAAE,CAAC,0DAA0D,EAAE,YAAY;AACvE,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAClE,CAAC,CAAC;AACH,cAAE,CAAC,iEAAiE,EAAE,YAAY;AAC9E,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aACzE,CAAC,CAAC;AACH,cAAE,CAAC,0CAA0C,EAAE,YAAY;AACvD,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aAClD,CAAC,CAAC;AACH,cAAE,CAAC,yCAAyC,EAAE,YAAY;AACtD,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACjD,CAAC,CAAC;AACH,cAAE,CAAC,6CAA6C,EAAE,YAAY;AAC1D,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACrD,CAAC,CAAC;AACH,cAAE,CAAC,iDAAiD,EAAE,YAAY;AAC9D,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aACzD,CAAC,CAAC;AACH,cAAE,CAAC,2CAA2C,EAAE,YAAY;AACxD,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACnD,CAAC,CAAC;AACH,cAAE,CAAC,iCAAiC,EAAE,YAAY;AAC9C,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACzC,CAAC,CAAC;AACH,cAAE,CAAC,kCAAkC,EAAE,YAAY;AAC/C,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC1C,CAAC,CAAC;AACH,cAAE,CAAC,mCAAmC,EAAE,YAAY;AAChD,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC3C,CAAC,CAAC;AACH,cAAE,CAAC,oCAAoC,EAAE,YAAY;AACjD,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aAC5C,CAAC,CAAC;AACH,cAAE,CAAC,qCAAqC,EAAE,YAAY;AAClD,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aAC7C,CAAC,CAAC;AACH,cAAE,CAAC,mCAAmC,EAAE,YAAY;AAChD,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC3C,CAAC,CAAC;AACH,cAAE,CAAC,mCAAmC,EAAE,YAAY;AAChD,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;aAC3C,CAAC,CAAC;AACH,cAAE,CAAC,wCAAwC,EAAE,YAAY;AACrD,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAChD,CAAC,CAAC;AACH,cAAE,CAAC,yCAAyC,EAAE,YAAY;AACtD,sBAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aACjD,CAAC,CAAC;AACH,cAAE,CAAC,wCAAwC,EAAE,YAAY;AACrD,sBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAChD,CAAC,CAAC;AACH,cAAE,CAAC,yCAAyC,EAAE,YAAY;AACtD,sBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aACjD,CAAC,CAAC;AACH,cAAE,CAAC,+CAA+C,EAAE,YAAY;AAC5D,sBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aACvD,CAAC,CAAC;AACH,cAAE,CAAC,6CAA6C,EAAE,YAAY;AAC1D,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;aACrD,CAAC,CAAC;AACH,cAAE,CAAC,8CAA8C,EAAE,YAAY;AAC3D,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;aACtD,CAAC,CAAC;AACH,cAAE,CAAC,qDAAqD,EAAE,YAAY;AAClE,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAC7D,CAAC,CAAC;AACH,cAAE,CAAC,gCAAgC,EAAE,YAAY;AAC7C,sBAAM,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACxC,CAAC,CAAC;AACH,cAAE,CAAC,oCAAoC,EAAE,YAAY;AACjD,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAC5C,CAAC,CAAC;AACH,cAAE,CAAC,oDAAoD,EAAE,YAAY;AACjE,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aAC5D,CAAC,CAAC;AACH,cAAE,CAAC,0CAA0C,EAAE,YAAY;AACvD,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aAClD,CAAC,CAAC;AACH,cAAE,CAAC,2DAA2D,EAAE,YAAY;AACxE,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;aACnE,CAAC,CAAC;AACH,cAAE,CAAC,sKAAsK,EAAE,YAAY;AACnL,sBAAM,CAAC,mCAAmC,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;aAC7K,CAAC,CAAC;AACH,cAAE,CAAC,kEAAkE,EAAE,YAAY;AAC/E,sBAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAC1E,CAAC,CAAC;AACH,cAAE,CAAC,yGAAyG,EAAE,YAAY;AACtH,sBAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC;aACjH,CAAC,CAAC;AACH,cAAE,CAAC,4DAA4D,EAAE,YAAY;AACzE,sBAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACpE,CAAC,CAAC;AACH,cAAE,CAAC,6EAA6E,EAAE,YAAY;AAC1F,sBAAM,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;aACrF,CAAC,CAAC;AACH,cAAE,CAAC,oDAAoD,EAAE,YAAY;AACjE,sBAAM,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAC5D,CAAC,CAAC;AACH,cAAE,CAAC,sDAAsD,EAAE,YAAY;AACnE,sBAAM,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;aAC9D,CAAC,CAAC;AACH,cAAE,CAAC,6CAA6C,EAAE,YAAY;AAC1D,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;aACrD,CAAC,CAAC;AACH,cAAE,CAAC,0CAA0C,EAAE,YAAY;AACvD,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAClD,CAAC,CAAC;AACH,cAAE,CAAC,6CAA6C,EAAE,YAAY;AAC1D,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;aACrD,CAAC,CAAC;AACH,cAAE,CAAC,0CAA0C,EAAE,YAAY;AACvD,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAClD,CAAC,CAAC;AACH,cAAE,CAAC,yDAAyD,EAAE,YAAY;AACtE,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;aACjE,CAAC,CAAC;AACH,cAAE,CAAC,kDAAkD,EAAE,YAAY;AAC/D,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aAC1D,CAAC,CAAC;AACH,cAAE,CAAC,sEAAsE,EAAE,YAAY;AACnF,sBAAM,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;aAC9E,CAAC,CAAC;AACH,cAAE,CAAC,wEAAwE,EAAE,YAAY;AACrF,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;aAChF,CAAC,CAAC;AACH,cAAE,CAAC,6CAA6C,EAAE,YAAY;AAC1D,sBAAM,CAAC,GAAG,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACrD,CAAC,CAAC;AACH,cAAE,CAAC,+DAA+D,EAAE,YAAY;AAC5E,sBAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAA,AAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACvE,CAAC,CAAC;AACH,cAAE,CAAC,4DAA4D,EAAE,YAAY;AACzE,sBAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;aACpE,CAAC,CAAC;AACH,cAAE,CAAC,8CAA8C,EAAE,YAAY;AAC3D,sBAAM,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aACtD,CAAC,CAAC;SACN,CAAC,CAAC;;AAEH,UAAE,CAAC,gCAAgC,EAAE,YAAY;AAC7C,kBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;SAC9C,CAAC,CAAC;KACN,CAAC,CAAC;;AAEH,YAAQ,CAAC,YAAY,EAAE,YAAY;AACjC,UAAE,CAAC,mBAAmB,EAAE,YAAY;AAChC,kBAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACrC,kBAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACxC,kBAAM,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5C,CAAC,CAAC;;AAEH,UAAE,CAAC,oBAAoB,EAAE,YAAY;AACjC,kBAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC3C,kBAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9C,kBAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC9C,kBAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAClD,CAAC,CAAC;KACJ,CAAC,CAAC;;AAEH,YAAQ,CAAC,gBAAgB,EAAE,YAAY;AACrC,UAAE,CAAC,sBAAsB,EAAE,YAAY;AACnC,kBAAM,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACvD,CAAC,CAAC;;AAEH,UAAE,CAAC,mBAAmB,EAAE,YAAY;AAChC,kBAAM,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACxC,kBAAM,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC3C,kBAAM,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C,CAAC,CAAC;;AAEH,UAAE,CAAC,oBAAoB,EAAE,YAAY;AACjC,kBAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1C,kBAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7C,kBAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;SACjD,CAAC,CAAC;KACJ,CAAC,CAAC;CACN,CAAC,CAAC","file":"s-string-compiled.js","sourcesContent":["/* global describe, it, expect */\n\ndescribe('String', function () {\n    'use strict';\n\n    describe('#trim()', function () {\n        var test = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFFHello, World!\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n        it('trims all ES5 whitespace', function () {\n            expect(test.trim()).toBe('Hello, World!');\n            expect(test.trim().length).toBe(13);\n        });\n\n        it('does not trim the zero-width space', function () {\n            expect('\\u200b'.trim()).toBe('\\u200b');\n            expect('\\u200b'.trim().length).toBe(1);\n        });\n    });\n\n    describe('#replace()', function () {\n        it('returns undefined for non-capturing groups', function () {\n            var groups = [];\n            'x'.replace(/x(.)?/g, function (m, group) {\n                groups.push(group); /* \"\" in FF, `undefined` in CH/WK/IE */\n            });\n            expect(groups.length).toBe(1);\n            expect(groups[0]).toBeUndefined();\n        });\n\n        it('should not fail in Firefox', function () {\n            expect(function () {\n                return '* alef\\n* beth \\n* gimel~0\\n'.replace(\n                    /(\\n)?(^[ \\t]*)([*+-]|\\d+[.])[ \\t]+([^\\r]+?(\\n{1,2}))(?=\\n*(~0|\\2([*+-]|\\d+[.])[ \\t]+))/gm,\n                    function (match, m1, m2, m3, m4) { return '<li>' + m4 + '</li>\\n'; }\n                );\n            }).not.toThrow();\n        });\n    });\n\n    describe('#split()', function () {\n        var test = 'ab';\n\n        it('If \"separator\" is undefined must return Array with one String - \"this\" string', function () {\n            expect(test.split()).toEqual([test]);\n            expect(test.split(void 0)).toEqual([test]);\n        });\n\n        it('If \"separator\" is undefined and \"limit\" set to 0 must return Array[]', function () {\n            expect(test.split(void 0, 0)).toEqual([]);\n        });\n\n        describe('Tests from Steven Levithan', function () {\n            it(\"''.split() results in ['']\", function () {\n                expect(''.split()).toEqual(['']);\n            });\n            it(\"''.split(/./) results in ['']\", function () {\n                expect(''.split(/./)).toEqual(['']);\n            });\n            it(\"''.split(/.?/) results in []\", function () {\n                expect(''.split(/.?/)).toEqual([]);\n            });\n            it(\"''.split(/.??/) results in []\", function () {\n                expect(''.split(/.??/)).toEqual([]);\n            });\n            it(\"'ab'.split(/a*/) results in ['', 'b']\", function () {\n                expect('ab'.split(/a*/)).toEqual(['', 'b']);\n            });\n            it(\"'ab'.split(/a*?/) results in ['a', 'b']\", function () {\n                expect('ab'.split(/a*?/)).toEqual(['a', 'b']);\n            });\n            it(\"'ab'.split(/(?:ab)/) results in ['', '']\", function () {\n                expect('ab'.split(/(?:ab)/)).toEqual(['', '']);\n            });\n            it(\"'ab'.split(/(?:ab)*/) results in ['', '']\", function () {\n                expect('ab'.split(/(?:ab)*/)).toEqual(['', '']);\n            });\n            it(\"'ab'.split(/(?:ab)*?/) results in ['a', 'b']\", function () {\n                expect('ab'.split(/(?:ab)*?/)).toEqual(['a', 'b']);\n            });\n            it(\"'test'.split('') results in ['t', 'e', 's', 't']\", function () {\n                expect('test'.split('')).toEqual(['t', 'e', 's', 't']);\n            });\n            it(\"'test'.split() results in ['test']\", function () {\n                expect('test'.split()).toEqual(['test']);\n            });\n            it(\"'111'.split(1) results in ['', '', '', '']\", function () {\n                expect('111'.split(1)).toEqual(['', '', '', '']);\n            });\n            it(\"'test'.split(/(?:)/, 2) results in ['t', 'e']\", function () {\n                expect('test'.split(/(?:)/, 2)).toEqual(['t', 'e']);\n            });\n            it(\"'test'.split(/(?:)/, -1) results in ['t', 'e', 's', 't']\", function () {\n                expect('test'.split(/(?:)/, -1)).toEqual(['t', 'e', 's', 't']);\n            });\n            it(\"'test'.split(/(?:)/, undefined) results in ['t', 'e', 's', 't']\", function () {\n                expect('test'.split(/(?:)/, undefined)).toEqual(['t', 'e', 's', 't']);\n            });\n            it(\"'test'.split(/(?:)/, null) results in []\", function () {\n                expect('test'.split(/(?:)/, null)).toEqual([]);\n            });\n            it(\"'test'.split(/(?:)/, NaN) results in []\", function () {\n                expect('test'.split(/(?:)/, NaN)).toEqual([]);\n            });\n            it(\"'test'.split(/(?:)/, true) results in ['t']\", function () {\n                expect('test'.split(/(?:)/, true)).toEqual(['t']);\n            });\n            it(\"'test'.split(/(?:)/, '2') results in ['t', 'e']\", function () {\n                expect('test'.split(/(?:)/, '2')).toEqual(['t', 'e']);\n            });\n            it(\"'test'.split(/(?:)/, 'two') results in []\", function () {\n                expect('test'.split(/(?:)/, 'two')).toEqual([]);\n            });\n            it(\"'a'.split(/-/) results in ['a']\", function () {\n                expect('a'.split(/-/)).toEqual(['a']);\n            });\n            it(\"'a'.split(/-?/) results in ['a']\", function () {\n                expect('a'.split(/-?/)).toEqual(['a']);\n            });\n            it(\"'a'.split(/-??/) results in ['a']\", function () {\n                expect('a'.split(/-??/)).toEqual(['a']);\n            });\n            it(\"'a'.split(/a/) results in ['', '']\", function () {\n                expect('a'.split(/a/)).toEqual(['', '']);\n            });\n            it(\"'a'.split(/a?/) results in ['', '']\", function () {\n                expect('a'.split(/a?/)).toEqual(['', '']);\n            });\n            it(\"'a'.split(/a??/) results in ['a']\", function () {\n                expect('a'.split(/a??/)).toEqual(['a']);\n            });\n            it(\"'ab'.split(/-/) results in ['ab']\", function () {\n                expect('ab'.split(/-/)).toEqual(['ab']);\n            });\n            it(\"'ab'.split(/-?/) results in ['a', 'b']\", function () {\n                expect('ab'.split(/-?/)).toEqual(['a', 'b']);\n            });\n            it(\"'ab'.split(/-??/) results in ['a', 'b']\", function () {\n                expect('ab'.split(/-??/)).toEqual(['a', 'b']);\n            });\n            it(\"'a-b'.split(/-/) results in ['a', 'b']\", function () {\n                expect('a-b'.split(/-/)).toEqual(['a', 'b']);\n            });\n            it(\"'a-b'.split(/-?/) results in ['a', 'b']\", function () {\n                expect('a-b'.split(/-?/)).toEqual(['a', 'b']);\n            });\n            it(\"'a-b'.split(/-??/) results in ['a', '-', 'b']\", function () {\n                expect('a-b'.split(/-??/)).toEqual(['a', '-', 'b']);\n            });\n            it(\"'a--b'.split(/-/) results in ['a', '', 'b']\", function () {\n                expect('a--b'.split(/-/)).toEqual(['a', '', 'b']);\n            });\n            it(\"'a--b'.split(/-?/) results in ['a', '', 'b']\", function () {\n                expect('a--b'.split(/-?/)).toEqual(['a', '', 'b']);\n            });\n            it(\"'a--b'.split(/-??/) results in ['a', '-', '-', 'b']\", function () {\n                expect('a--b'.split(/-??/)).toEqual(['a', '-', '-', 'b']);\n            });\n            it(\"''.split(/()()/) results in []\", function () {\n                expect(''.split(/()()/)).toEqual([]);\n            });\n            it(\"'.'.split(/()()/) results in ['.']\", function () {\n                expect('.'.split(/()()/)).toEqual(['.']);\n            });\n            it(\"'.'.split(/(.?)(.?)/) results in ['', '.', '', '']\", function () {\n                expect('.'.split(/(.?)(.?)/)).toEqual(['', '.', '', '']);\n            });\n            it(\"'.'.split(/(.??)(.??)/) results in ['.']\", function () {\n                expect('.'.split(/(.??)(.??)/)).toEqual(['.']);\n            });\n            it(\"'.'.split(/(.)?(.)?/) results in ['', '.', undefined, '']\", function () {\n                expect('.'.split(/(.)?(.)?/)).toEqual(['', '.', undefined, '']);\n            });\n            it(\"'A<B>bold</B>and<CODE>coded</CODE>'.split(/<(\\\\/)?([^<>]+)>/) results in ['A', undefined, 'B', 'bold', '/', 'B', 'and', undefined, 'CODE', 'coded', '/', 'CODE', '']\", function () {\n                expect('A<B>bold</B>and<CODE>coded</CODE>'.split(/<(\\/)?([^<>]+)>/)).toEqual(['A', undefined, 'B', 'bold', '/', 'B', 'and', undefined, 'CODE', 'coded', '/', 'CODE', '']);\n            });\n            it(\"'tesst'.split(/(s)*/) results in ['t', undefined, 'e', 's', 't']\", function () {\n                expect('tesst'.split(/(s)*/)).toEqual(['t', undefined, 'e', 's', 't']);\n            });\n            it(\"'tesst'.split(/(s)*?/) results in ['t', undefined, 'e', undefined, 's', undefined, 's', undefined, 't']\", function () {\n                expect('tesst'.split(/(s)*?/)).toEqual(['t', undefined, 'e', undefined, 's', undefined, 's', undefined, 't']);\n            });\n            it(\"'tesst'.split(/(s*)/) results in ['t', '', 'e', 'ss', 't']\", function () {\n                expect('tesst'.split(/(s*)/)).toEqual(['t', '', 'e', 'ss', 't']);\n            });\n            it(\"'tesst'.split(/(s*?)/) results in ['t', '', 'e', '', 's', '', 's', '', 't']\", function () {\n                expect('tesst'.split(/(s*?)/)).toEqual(['t', '', 'e', '', 's', '', 's', '', 't']);\n            });\n            it(\"'tesst'.split(/(?:s)*/) results in ['t', 'e', 't']\", function () {\n                expect('tesst'.split(/(?:s)*/)).toEqual(['t', 'e', 't']);\n            });\n            it(\"'tesst'.split(/(?=s+)/) results in ['te', 's', 'st']\", function () {\n                expect('tesst'.split(/(?=s+)/)).toEqual(['te', 's', 'st']);\n            });\n            it(\"'test'.split('t') results in ['', 'es', '']\", function () {\n                expect('test'.split('t')).toEqual(['', 'es', '']);\n            });\n            it(\"'test'.split('es') results in ['t', 't']\", function () {\n                expect('test'.split('es')).toEqual(['t', 't']);\n            });\n            it(\"'test'.split(/t/) results in ['', 'es', '']\", function () {\n                expect('test'.split(/t/)).toEqual(['', 'es', '']);\n            });\n            it(\"'test'.split(/es/) results in ['t', 't']\", function () {\n                expect('test'.split(/es/)).toEqual(['t', 't']);\n            });\n            it(\"'test'.split(/(t)/) results in ['', 't', 'es', 't', '']\", function () {\n                expect('test'.split(/(t)/)).toEqual(['', 't', 'es', 't', '']);\n            });\n            it(\"'test'.split(/(es)/) results in ['t', 'es', 't']\", function () {\n                expect('test'.split(/(es)/)).toEqual(['t', 'es', 't']);\n            });\n            it(\"'test'.split(/(t)(e)(s)(t)/) results in ['', 't', 'e', 's', 't', '']\", function () {\n                expect('test'.split(/(t)(e)(s)(t)/)).toEqual(['', 't', 'e', 's', 't', '']);\n            });\n            it(\"'.'.split(/(((.((.??)))))/) results in ['', '.', '.', '.', '', '', '']\", function () {\n                expect('.'.split(/(((.((.??)))))/)).toEqual(['', '.', '.', '.', '', '', '']);\n            });\n            it(\"'.'.split(/(((((.??)))))/) results in ['.']\", function () {\n                expect('.'.split(/(((((.??)))))/)).toEqual(['.']);\n            });\n            it(\"'a b c d'.split(/ /, -(Math.pow(2, 32) - 1)) results in ['a']\", function () {\n                expect('a b c d'.split(/ /, -(Math.pow(2, 32) - 1))).toEqual(['a']);\n            });\n            it(\"'a b c d'.split(/ /, Math.pow(2, 32) + 1) results in ['a']\", function () {\n                expect('a b c d'.split(/ /, Math.pow(2, 32) + 1)).toEqual(['a']);\n            });\n            it(\"'a b c d'.split(/ /, Infinity) results in []\", function () {\n                expect('a b c d'.split(/ /, Infinity)).toEqual([]);\n            });\n        });\n\n        it('works with the second argument', function () {\n            expect('a b'.split(/ /, 1)).toEqual(['a']);\n        });\n    });\n\n    describe('#indexOf()', function () {\n      it('has basic support', function () {\n          expect('abcab'.indexOf('a')).toBe(0);\n          expect('abcab'.indexOf('a', 1)).toBe(3);\n          expect('abcab'.indexOf('a', 4)).toBe(-1);\n      });\n\n      it('works with unicode', function () {\n          expect('あいabcあいabc'.indexOf('あい')).toBe(0);\n          expect('あいabcあいabc'.indexOf('あい', 0)).toBe(0);\n          expect('あいabcあいabc'.indexOf('あい', 1)).toBe(5);\n          expect('あいabcあいabc'.indexOf('あい', 6)).toBe(-1);\n      });\n    });\n\n    describe('#lastIndexOf()', function () {\n      it('has the right length', function () {\n          expect(String.prototype.lastIndexOf.length).toBe(1);\n      });\n\n      it('has basic support', function () {\n          expect('abcd'.lastIndexOf('d')).toBe(3);\n          expect('abcd'.lastIndexOf('d', 3)).toBe(3);\n          expect('abcd'.lastIndexOf('d', 2)).toBe(-1);\n      });\n\n      it('works with unicode', function () {\n          expect('abcあい'.lastIndexOf('あい')).toBe(3);\n          expect('abcあい'.lastIndexOf('あい', 3)).toBe(3);\n          expect('abcあい'.lastIndexOf('あい', 2)).toBe(-1);\n      });\n    });\n});\n"]}