{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,OAAO,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC,SAAS,CAAC,CAAC;;AAEjE,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;;AAE1B,OAAO,CAAC,SAAS,CAAC,GAAG,UAAU,IAAI,EAAE;AACnC,MAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;;AAEnB,MAAI,MAAM,GAAG,OAAO,EAAE,CAAC;;AAEvB,SAAO;AACL,WAAO,EAAE;AACP,WAAK,EAAE,SAAS,KAAK,CAAC,KAAK,EAAE;AAC3B,YAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;;AAExB,YAAI,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE;AAC/B,iBAAO;SACR;;AAED,aAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;OACxB;;AAED,qBAAe,EAAE,SAAS,eAAe,CAAC,IAAI,EAAE;AAC9C,YAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACrB,YAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;;AAEzB,YAAI,IAAI,CAAC,MAAM,CAAC,EAAE,OAAO;AACzB,YAAI,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE;AAC5B,iBAAO,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;SAC5C,CAAC,EAAE,OAAO;;AAEX,YAAI,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC,yBAAyB,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;;AAErG,cAAI,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;AAClC,cAAI,QAAQ,CAAC,SAAS,EAAE,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;AAChG,mBAAO;WACR;SACF;;AAED,YAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,EAAE;AAC9B,cAAI,IAAI,GAAG,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;AACvE,cAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,YAAY,EAAE,EAAE;AACvC,gBAAI,YAAY,GAAG,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;AAChD,gBAAI,KAAK,GAAG,CAAC,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AACvD,iBAAK,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;AACrB,gBAAI,CAAC,WAAW,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,EAAE,KAAK,EAAE,YAAY,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;WAC/G,MAAM;AACL,gBAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;WACxB;SACF;OACF;KACF;GACF,CAAC;CACH,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC","file":"index-compiled.js","sourcesContent":["\"use strict\";\n\nvar _Symbol = require(\"babel-runtime/core-js/symbol\")[\"default\"];\n\nexports.__esModule = true;\n\nexports[\"default\"] = function (_ref) {\n  var t = _ref.types;\n\n  var IGNORE = _Symbol();\n\n  return {\n    visitor: {\n      Scope: function Scope(_ref2) {\n        var scope = _ref2.scope;\n\n        if (!scope.getBinding(\"Symbol\")) {\n          return;\n        }\n\n        scope.rename(\"Symbol\");\n      },\n\n      UnaryExpression: function UnaryExpression(path) {\n        var node = path.node;\n        var parent = path.parent;\n\n        if (node[IGNORE]) return;\n        if (path.find(function (path) {\n          return path.node && !!path.node._generated;\n        })) return;\n\n        if (path.parentPath.isBinaryExpression() && t.EQUALITY_BINARY_OPERATORS.indexOf(parent.operator) >= 0) {\n          // optimise `typeof foo === \"string\"` since we can determine that they'll never need to handle symbols\n          var opposite = path.getOpposite();\n          if (opposite.isLiteral() && opposite.node.value !== \"symbol\" && opposite.node.value !== \"object\") {\n            return;\n          }\n        }\n\n        if (node.operator === \"typeof\") {\n          var call = t.callExpression(this.addHelper(\"typeof\"), [node.argument]);\n          if (path.get(\"argument\").isIdentifier()) {\n            var undefLiteral = t.stringLiteral(\"undefined\");\n            var unary = t.unaryExpression(\"typeof\", node.argument);\n            unary[IGNORE] = true;\n            path.replaceWith(t.conditionalExpression(t.binaryExpression(\"===\", unary, undefLiteral), undefLiteral, call));\n          } else {\n            path.replaceWith(call);\n          }\n        }\n      }\n    }\n  };\n};\n\nmodule.exports = exports[\"default\"];"]}