{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["\"use strict\";\n\nvar _classCallCheck = require(\"babel-runtime/helpers/class-call-check\")[\"default\"];\n\nvar _Object$create = require(\"babel-runtime/core-js/object/create\")[\"default\"];\n\nvar _Symbol = require(\"babel-runtime/core-js/symbol\")[\"default\"];\n\nvar _interopRequireDefault = require(\"babel-runtime/helpers/interop-require-default\")[\"default\"];\n\nvar _interopRequireWildcard = require(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"];\n\nexports.__esModule = true;\n\nvar _babelTraverse = require(\"babel-traverse\");\n\nvar _babelTraverse2 = _interopRequireDefault(_babelTraverse);\n\nvar _tdz = require(\"./tdz\");\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nvar _lodashObjectValues = require(\"lodash/object/values\");\n\nvar _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);\n\nvar _lodashObjectExtend = require(\"lodash/object/extend\");\n\nvar _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);\n\nvar _babelTemplate = require(\"babel-template\");\n\nvar _babelTemplate2 = _interopRequireDefault(_babelTemplate);\n\n/*:: import type NodePath from \"babel-traverse\";*/\n/*:: import type Scope from \"babel-traverse\";*/\n/*:: import type File from \"../../../file\";*/\nexports[\"default\"] = function () {\n  return {\n    visitor: {\n      VariableDeclaration: function VariableDeclaration(path, file) {\n        var node = path.node;\n        var parent = path.parent;\n        var scope = path.scope;\n\n        if (!isBlockScoped(node)) return;\n        convertBlockScopedToVar(node, parent, scope);\n\n        if (node._tdzThis) {\n          var nodes = [node];\n\n          for (var i = 0; i < node.declarations.length; i++) {\n            var decl = node.declarations[i];\n            if (decl.init) {\n              var assign = t.assignmentExpression(\"=\", decl.id, decl.init);\n              assign._ignoreBlockScopingTDZ = true;\n              nodes.push(t.expressionStatement(assign));\n            }\n            decl.init = file.addHelper(\"temporalUndefined\");\n          }\n\n          node._blockHoist = 2;\n\n          if (path.isCompletionRecord()) {\n            // ensure we don't break completion record semantics by returning\n            // the initialiser of the last declarator\n            nodes.push(t.expressionStatement(scope.buildUndefinedNode()));\n          }\n\n          path.replaceWithMultiple(nodes);\n        }\n      },\n\n      Loop: function Loop(path, file) {\n        var node = path.node;\n        var parent = path.parent;\n        var scope = path.scope;\n\n        t.ensureBlock(node);\n        var blockScoping = new BlockScoping(path, path.get(\"body\"), parent, scope, file);\n        var replace = blockScoping.run();\n        if (replace) path.replaceWith(replace);\n      },\n\n      \"BlockStatement|Program\": function BlockStatementProgram(path, file) {\n        if (!t.isLoop(path.parent)) {\n          var blockScoping = new BlockScoping(null, path, path.parent, path.scope, file);\n          blockScoping.run();\n        }\n      }\n    }\n  };\n};\n\nvar buildRetCheck = _babelTemplate2[\"default\"](\"\\n  if (typeof RETURN === \\\"object\\\") return RETURN.v;\\n\");\n\nfunction isBlockScoped(node) {\n  if (!t.isVariableDeclaration(node)) return false;\n  if (node[t.BLOCK_SCOPED_SYMBOL]) return true;\n  if (node.kind !== \"let\" && node.kind !== \"const\") return false;\n  return true;\n}\n\nfunction convertBlockScopedToVar(node, parent, scope) {\n  // https://github.com/babel/babel/issues/255\n  if (!t.isFor(parent)) {\n    for (var i = 0; i < node.declarations.length; i++) {\n      var declar = node.declarations[i];\n      declar.init = declar.init || scope.buildUndefinedNode();\n    }\n  }\n\n  node[t.BLOCK_SCOPED_SYMBOL] = true;\n  node.kind = \"var\";\n}\n\nfunction isVar(node) {\n  return t.isVariableDeclaration(node, { kind: \"var\" }) && !isBlockScoped(node);\n}\n\nfunction replace(path, node, scope, remaps) {\n  var remap = remaps[node.name];\n  if (!remap) return;\n\n  var ownBinding = scope.getBindingIdentifier(node.name);\n  if (ownBinding === remap.binding) {\n    node.name = remap.uid;\n  } else {\n    // scope already has it's own binding that doesn't\n    // match the one we have a stored replacement for\n    if (path) path.skip();\n  }\n}\n\nvar replaceVisitor = {\n  ReferencedIdentifier: function ReferencedIdentifier(path, remaps) {\n    replace(path, path.node, path.scope, remaps);\n  },\n\n  AssignmentExpression: function AssignmentExpression(path, remaps) {\n    var ids = path.getBindingIdentifiers();\n    for (var _name in ids) {\n      replace(null, ids[_name], path.scope, remaps);\n    }\n  }\n};\n\nfunction traverseReplace(node, parent, scope, remaps) {\n  if (t.isIdentifier(node)) {\n    replace(node, parent, scope, remaps);\n  }\n\n  if (t.isAssignmentExpression(node)) {\n    var ids = t.getBindingIdentifiers(node);\n    for (var _name2 in ids) {\n      replace(ids[_name2], parent, scope, remaps);\n    }\n  }\n\n  scope.traverse(node, replaceVisitor, remaps);\n}\n\nvar letReferenceBlockVisitor = _babelTraverse2[\"default\"].visitors.merge([{\n  Function: function Function(path, state) {\n    path.traverse(letReferenceFunctionVisitor, state);\n    return path.skip();\n  }\n}, _tdz.visitor]);\n\nvar letReferenceFunctionVisitor = _babelTraverse2[\"default\"].visitors.merge([{\n  ReferencedIdentifier: function ReferencedIdentifier(path, state) {\n    var ref = state.letReferences[path.node.name];\n\n    // not a part of our scope\n    if (!ref) return;\n\n    // this scope has a variable with the same name so it couldn't belong\n    // to our let scope\n    var localBinding = path.scope.getBindingIdentifier(path.node.name);\n    if (localBinding && localBinding !== ref) return;\n\n    state.closurify = true;\n  }\n}, _tdz.visitor]);\n\nvar hoistVarDeclarationsVisitor = {\n  enter: function enter(path, self) {\n    var node = path.node;\n    var parent = path.parent;\n\n    if (path.isForStatement()) {\n      if (isVar(node.init, node)) {\n        var nodes = self.pushDeclar(node.init);\n        if (nodes.length === 1) {\n          node.init = nodes[0];\n        } else {\n          node.init = t.sequenceExpression(nodes);\n        }\n      }\n    } else if (path.isFor()) {\n      if (isVar(node.left, node)) {\n        self.pushDeclar(node.left);\n        node.left = node.left.declarations[0].id;\n      }\n    } else if (isVar(node, parent)) {\n      path.replaceWithMultiple(self.pushDeclar(node).map(function (expr) {\n        return t.expressionStatement(expr);\n      }));\n    } else if (path.isFunction()) {\n      return path.skip();\n    }\n  }\n};\n\nvar loopLabelVisitor = {\n  LabeledStatement: function LabeledStatement(_ref, state) {\n    var node = _ref.node;\n\n    state.innerLabels.push(node.label.name);\n  }\n};\n\nvar continuationVisitor = {\n  enter: function enter(path, state) {\n    if (path.isAssignmentExpression() || path.isUpdateExpression()) {\n      var bindings = path.getBindingIdentifiers();\n      for (var _name3 in bindings) {\n        if (state.outsideReferences[_name3] !== path.scope.getBindingIdentifier(_name3)) continue;\n        state.reassignments[_name3] = true;\n      }\n    }\n  }\n};\n\nfunction loopNodeTo(node) {\n  if (t.isBreakStatement(node)) {\n    return \"break\";\n  } else if (t.isContinueStatement(node)) {\n    return \"continue\";\n  }\n}\n\nvar loopVisitor = {\n  Loop: function Loop(path, state) {\n    var oldIgnoreLabeless = state.ignoreLabeless;\n    state.ignoreLabeless = true;\n    path.traverse(loopVisitor, state);\n    state.ignoreLabeless = oldIgnoreLabeless;\n    path.skip();\n  },\n\n  Function: function Function(path) {\n    path.skip();\n  },\n\n  SwitchCase: function SwitchCase(path, state) {\n    var oldInSwitchCase = state.inSwitchCase;\n    state.inSwitchCase = true;\n    path.traverse(loopVisitor, state);\n    state.inSwitchCase = oldInSwitchCase;\n    path.skip();\n  },\n\n  \"BreakStatement|ContinueStatement|ReturnStatement\": function BreakStatementContinueStatementReturnStatement(path, state) {\n    var node = path.node;\n    var parent = path.parent;\n    var scope = path.scope;\n\n    if (node[this.LOOP_IGNORE]) return;\n\n    var replace = undefined;\n    var loopText = loopNodeTo(node);\n\n    if (loopText) {\n      if (node.label) {\n        // we shouldn't be transforming this because it exists somewhere inside\n        if (state.innerLabels.indexOf(node.label.name) >= 0) {\n          return;\n        }\n\n        loopText = loopText + \"|\" + node.label.name;\n      } else {\n        // we shouldn't be transforming these statements because\n        // they don't refer to the actual loop we're scopifying\n        if (state.ignoreLabeless) return;\n\n        //\n        if (state.inSwitchCase) return;\n\n        // break statements mean something different in this context\n        if (t.isBreakStatement(node) && t.isSwitchCase(parent)) return;\n      }\n\n      state.hasBreakContinue = true;\n      state.map[loopText] = node;\n      replace = t.stringLiteral(loopText);\n    }\n\n    if (path.isReturnStatement()) {\n      state.hasReturn = true;\n      replace = t.objectExpression([t.objectProperty(t.identifier(\"v\"), node.argument || scope.buildUndefinedNode())]);\n    }\n\n    if (replace) {\n      replace = t.returnStatement(replace);\n      replace[this.LOOP_IGNORE] = true;\n      path.skip();\n      path.replaceWith(t.inherits(replace, node));\n    }\n  }\n};\n\nvar BlockScoping = (function () {\n  function BlockScoping(loopPath /*:: ?: NodePath*/, blockPath /*: NodePath*/, parent /*: Object*/, scope /*: Scope*/, file /*: File*/) {\n    _classCallCheck(this, BlockScoping);\n\n    this.parent = parent;\n    this.scope = scope;\n    this.file = file;\n\n    this.blockPath = blockPath;\n    this.block = blockPath.node;\n\n    this.outsideLetReferences = _Object$create(null);\n    this.hasLetReferences = false;\n    this.letReferences = _Object$create(null);\n    this.body = [];\n\n    if (loopPath) {\n      this.loopParent = loopPath.parent;\n      this.loopLabel = t.isLabeledStatement(this.loopParent) && this.loopParent.label;\n      this.loopPath = loopPath;\n      this.loop = loopPath.node;\n    }\n  }\n\n  /**\n   * Start the ball rolling.\n   */\n\n  BlockScoping.prototype.run = function run() {\n    var block = this.block;\n    if (block._letDone) return;\n    block._letDone = true;\n\n    var needsClosure = this.getLetReferences();\n\n    // this is a block within a `Function/Program` so we can safely leave it be\n    if (t.isFunction(this.parent) || t.isProgram(this.block)) return;\n\n    // we can skip everything\n    if (!this.hasLetReferences) return;\n\n    if (needsClosure) {\n      this.wrapClosure();\n    } else {\n      this.remap();\n    }\n\n    if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {\n      return t.labeledStatement(this.loopLabel, this.loop);\n    }\n  };\n\n  BlockScoping.prototype.remap = function remap() {\n    var hasRemaps = false;\n    var letRefs = this.letReferences;\n    var scope = this.scope;\n\n    // alright, so since we aren't wrapping this block in a closure\n    // we have to check if any of our let variables collide with\n    // those in upper scopes and then if they do, generate a uid\n    // for them and replace all references with it\n    var remaps = _Object$create(null);\n\n    for (var key in letRefs) {\n      // just an Identifier node we collected in `getLetReferences`\n      // this is the defining identifier of a declaration\n      var ref = letRefs[key];\n\n      // todo: could skip this if the colliding binding is in another function\n      if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {\n        var uid = scope.generateUidIdentifier(ref.name).name;\n        ref.name = uid;\n\n        hasRemaps = true;\n        remaps[key] = remaps[uid] = {\n          binding: ref,\n          uid: uid\n        };\n      }\n    }\n\n    if (!hasRemaps) return;\n\n    //\n\n    var loop = this.loop;\n    if (loop) {\n      traverseReplace(loop.right, loop, scope, remaps);\n      traverseReplace(loop.test, loop, scope, remaps);\n      traverseReplace(loop.update, loop, scope, remaps);\n    }\n\n    this.blockPath.traverse(replaceVisitor, remaps);\n  };\n\n  BlockScoping.prototype.wrapClosure = function wrapClosure() {\n    var block = this.block;\n\n    var outsideRefs = this.outsideLetReferences;\n\n    // remap loop heads with colliding variables\n    if (this.loop) {\n      for (var _name4 in outsideRefs) {\n        var id = outsideRefs[_name4];\n\n        if (this.scope.hasGlobal(id.name) || this.scope.parentHasBinding(id.name)) {\n          delete outsideRefs[id.name];\n          delete this.letReferences[id.name];\n\n          this.scope.rename(id.name);\n\n          this.letReferences[id.name] = id;\n          outsideRefs[id.name] = id;\n        }\n      }\n    }\n\n    // if we're inside of a for loop then we search to see if there are any\n    // `break`s, `continue`s, `return`s etc\n    this.has = this.checkLoop();\n\n    // hoist let references to retain scope\n    this.hoistVarDeclarations();\n\n    // turn outsideLetReferences into an array\n    var params = _lodashObjectValues2[\"default\"](outsideRefs);\n    var args = _lodashObjectValues2[\"default\"](outsideRefs);\n\n    // build the closure that we're going to wrap the block with\n    var fn = t.functionExpression(null, params, t.blockStatement(block.body));\n    fn.shadow = true;\n\n    // continuation\n    this.addContinuations(fn);\n\n    // replace the current block body with the one we're going to build\n    block.body = this.body;\n\n    var ref = fn;\n\n    if (this.loop) {\n      ref = this.scope.generateUidIdentifier(\"loop\");\n      this.loopPath.insertBefore(t.variableDeclaration(\"var\", [t.variableDeclarator(ref, fn)]));\n    }\n\n    // build a call and a unique id that we can assign the return value to\n    var call = t.callExpression(ref, args);\n    var ret = this.scope.generateUidIdentifier(\"ret\");\n\n    // handle generators\n    var hasYield = _babelTraverse2[\"default\"].hasType(fn.body, this.scope, \"YieldExpression\", t.FUNCTION_TYPES);\n    if (hasYield) {\n      fn.generator = true;\n      call = t.yieldExpression(call, true);\n    }\n\n    // handlers async functions\n    var hasAsync = _babelTraverse2[\"default\"].hasType(fn.body, this.scope, \"AwaitExpression\", t.FUNCTION_TYPES);\n    if (hasAsync) {\n      fn.async = true;\n      call = t.awaitExpression(call);\n    }\n\n    this.buildClosure(ret, call);\n  };\n\n  /**\n   * Push the closure to the body.\n   */\n\n  BlockScoping.prototype.buildClosure = function buildClosure(ret /*: { type: \"Identifier\" }*/, call /*: { type: \"CallExpression\" }*/) {\n    var has = this.has;\n    if (has.hasReturn || has.hasBreakContinue) {\n      this.buildHas(ret, call);\n    } else {\n      this.body.push(t.expressionStatement(call));\n    }\n  };\n\n  /**\n   * If any of the outer let variables are reassigned then we need to rename them in\n   * the closure so we can get direct access to the outer variable to continue the\n   * iteration with bindings based on each iteration.\n   *\n   * Reference: https://github.com/babel/babel/issues/1078\n   */\n\n  BlockScoping.prototype.addContinuations = function addContinuations(fn) {\n    var state = {\n      reassignments: {},\n      outsideReferences: this.outsideLetReferences\n    };\n\n    this.scope.traverse(fn, continuationVisitor, state);\n\n    for (var i = 0; i < fn.params.length; i++) {\n      var param = fn.params[i];\n      if (!state.reassignments[param.name]) continue;\n\n      var newParam = this.scope.generateUidIdentifier(param.name);\n      fn.params[i] = newParam;\n\n      this.scope.rename(param.name, newParam.name, fn);\n\n      // assign outer reference as it's been modified internally and needs to be retained\n      fn.body.body.push(t.expressionStatement(t.assignmentExpression(\"=\", param, newParam)));\n    }\n  };\n\n  BlockScoping.prototype.getLetReferences = function getLetReferences() {\n    var block = this.block;\n\n    var declarators = [];\n\n    if (this.loop) {\n      var init = this.loop.left || this.loop.init;\n      if (isBlockScoped(init)) {\n        declarators.push(init);\n        _lodashObjectExtend2[\"default\"](this.outsideLetReferences, t.getBindingIdentifiers(init));\n      }\n    }\n\n    //\n    if (block.body) {\n      for (var i = 0; i < block.body.length; i++) {\n        var declar = block.body[i];\n        if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar) || isBlockScoped(declar)) {\n          if (isBlockScoped(declar)) convertBlockScopedToVar(declar, block, this.scope);\n          declarators = declarators.concat(declar.declarations || declar);\n        }\n      }\n    }\n\n    //\n    for (var i = 0; i < declarators.length; i++) {\n      var declar = declarators[i];\n      var keys = t.getBindingIdentifiers(declar);\n      _lodashObjectExtend2[\"default\"](this.letReferences, keys);\n      this.hasLetReferences = true;\n    }\n\n    // no let references so we can just quit\n    if (!this.hasLetReferences) return;\n\n    var state = {\n      letReferences: this.letReferences,\n      closurify: false,\n      file: this.file\n    };\n\n    // traverse through this block, stopping on functions and checking if they\n    // contain any local let references\n    this.blockPath.traverse(letReferenceBlockVisitor, state);\n\n    return state.closurify;\n  };\n\n  /**\n   * If we're inside of a loop then traverse it and check if it has one of\n   * the following node types `ReturnStatement`, `BreakStatement`,\n   * `ContinueStatement` and replace it with a return value that we can track\n   * later on.\n   */\n\n  BlockScoping.prototype.checkLoop = function checkLoop() /*: Object*/ {\n    var state = {\n      hasBreakContinue: false,\n      ignoreLabeless: false,\n      inSwitchCase: false,\n      innerLabels: [],\n      hasReturn: false,\n      isLoop: !!this.loop,\n      map: {},\n      LOOP_IGNORE: _Symbol()\n    };\n\n    this.blockPath.traverse(loopLabelVisitor, state);\n    this.blockPath.traverse(loopVisitor, state);\n\n    return state;\n  };\n\n  /**\n   * Hoist all let declarations in this block to before it so they retain scope\n   * once we wrap everything in a closure.\n   */\n\n  BlockScoping.prototype.hoistVarDeclarations = function hoistVarDeclarations() {\n    this.blockPath.traverse(hoistVarDeclarationsVisitor, this);\n  };\n\n  /**\n   * Turn a `VariableDeclaration` into an array of `AssignmentExpressions` with\n   * their declarations hoisted to before the closure wrapper.\n   */\n\n  BlockScoping.prototype.pushDeclar = function pushDeclar(node /*: { type: \"VariableDeclaration\" }*/) /*: Array<Object>*/ {\n    var declars = [];\n    var names = t.getBindingIdentifiers(node);\n    for (var _name5 in names) {\n      declars.push(t.variableDeclarator(names[_name5]));\n    }\n\n    this.body.push(t.variableDeclaration(node.kind, declars));\n\n    var replace = [];\n\n    for (var i = 0; i < node.declarations.length; i++) {\n      var declar = node.declarations[i];\n      if (!declar.init) continue;\n\n      var expr = t.assignmentExpression(\"=\", declar.id, declar.init);\n      replace.push(t.inherits(expr, declar));\n    }\n\n    return replace;\n  };\n\n  BlockScoping.prototype.buildHas = function buildHas(ret /*: { type: \"Identifier\" }*/, call /*: { type: \"CallExpression\" }*/) {\n    var body = this.body;\n\n    body.push(t.variableDeclaration(\"var\", [t.variableDeclarator(ret, call)]));\n\n    var retCheck = undefined;\n    var has = this.has;\n    var cases = [];\n\n    if (has.hasReturn) {\n      // typeof ret === \"object\"\n      retCheck = buildRetCheck({\n        RETURN: ret\n      });\n    }\n\n    if (has.hasBreakContinue) {\n      for (var key in has.map) {\n        cases.push(t.switchCase(t.stringLiteral(key), [has.map[key]]));\n      }\n\n      if (has.hasReturn) {\n        cases.push(t.switchCase(null, [retCheck]));\n      }\n\n      if (cases.length === 1) {\n        var single = cases[0];\n        body.push(t.ifStatement(t.binaryExpression(\"===\", ret, single.test), single.consequent[0]));\n      } else {\n        // https://github.com/babel/babel/issues/998\n        for (var i = 0; i < cases.length; i++) {\n          var caseConsequent = cases[i].consequent[0];\n          if (t.isBreakStatement(caseConsequent) && !caseConsequent.label) {\n            caseConsequent.label = this.loopLabel = this.loopLabel || this.scope.generateUidIdentifier(\"loop\");\n          }\n        }\n\n        body.push(t.switchStatement(ret, cases));\n      }\n    } else {\n      if (has.hasReturn) {\n        body.push(retCheck);\n      }\n    }\n  };\n\n  return BlockScoping;\n})();\n\nmodule.exports = exports[\"default\"];"]}