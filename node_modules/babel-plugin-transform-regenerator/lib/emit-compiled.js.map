{"version":3,"sources":["emit.js"],"names":[],"mappings":"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","file":"emit-compiled.js","sourcesContent":["/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n\"use strict\";\n\nvar _interopRequireDefault = require(\"babel-runtime/helpers/interop-require-default\")[\"default\"];\n\nvar _interopRequireWildcard = require(\"babel-runtime/helpers/interop-require-wildcard\")[\"default\"];\n\nvar _assert = require(\"assert\");\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _babelTypes = require(\"babel-types\");\n\nvar t = _interopRequireWildcard(_babelTypes);\n\nvar _leap = require(\"./leap\");\n\nvar leap = _interopRequireWildcard(_leap);\n\nvar _meta = require(\"./meta\");\n\nvar meta = _interopRequireWildcard(_meta);\n\nvar _util = require(\"./util\");\n\nvar util = _interopRequireWildcard(_util);\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Emitter(contextId) {\n  _assert2[\"default\"].ok(this instanceof Emitter);\n  t.assertIdentifier(contextId);\n\n  // Used to generate unique temporary names.\n  this.nextTempId = 0;\n\n  // In order to make sure the context object does not collide with\n  // anything in the local scope, we might have to rename it, so we\n  // refer to it symbolically instead of just assuming that it will be\n  // called \"context\".\n  this.contextId = contextId;\n\n  // An append-only list of Statements that grows each time this.emit is\n  // called.\n  this.listing = [];\n\n  // A sparse array whose keys correspond to locations in this.listing\n  // that have been marked as branch/jump targets.\n  this.marked = [true];\n\n  // The last location will be marked when this.getDispatchLoop is\n  // called.\n  this.finalLoc = loc();\n\n  // A list of all leap.TryEntry statements emitted.\n  this.tryEntries = [];\n\n  // Each time we evaluate the body of a loop, we tell this.leapManager\n  // to enter a nested loop context that determines the meaning of break\n  // and continue statements therein.\n  this.leapManager = new leap.LeapManager(this);\n}\n\nvar Ep = Emitter.prototype;\nexports.Emitter = Emitter;\n\n// Offsets into this.listing that could be used as targets for branches or\n// jumps are represented as numeric Literal nodes. This representation has\n// the amazingly convenient benefit of allowing the exact value of the\n// location to be determined at any time, even after generating code that\n// refers to the location.\nfunction loc() {\n  return t.numericLiteral(-1);\n}\n\n// Sets the exact value of the given location to the offset of the next\n// Statement emitted.\nEp.mark = function (loc) {\n  t.assertLiteral(loc);\n  var index = this.listing.length;\n  if (loc.value === -1) {\n    loc.value = index;\n  } else {\n    // Locations can be marked redundantly, but their values cannot change\n    // once set the first time.\n    _assert2[\"default\"].strictEqual(loc.value, index);\n  }\n  this.marked[index] = true;\n  return loc;\n};\n\nEp.emit = function (node) {\n  if (t.isExpression(node)) {\n    node = t.expressionStatement(node);\n  }\n\n  t.assertStatement(node);\n  this.listing.push(node);\n};\n\n// Shorthand for emitting assignment statements. This will come in handy\n// for assignments to temporary variables.\nEp.emitAssign = function (lhs, rhs) {\n  this.emit(this.assign(lhs, rhs));\n  return lhs;\n};\n\n// Shorthand for an assignment statement.\nEp.assign = function (lhs, rhs) {\n  return t.expressionStatement(t.assignmentExpression(\"=\", lhs, rhs));\n};\n\n// Convenience function for generating expressions like context.next,\n// context.sent, and context.rval.\nEp.contextProperty = function (name, computed) {\n  return t.memberExpression(this.contextId, computed ? t.stringLiteral(name) : t.identifier(name), !!computed);\n};\n\n// Shorthand for setting context.rval and jumping to `context.stop()`.\nEp.stop = function (rval) {\n  if (rval) {\n    this.setReturnValue(rval);\n  }\n\n  this.jump(this.finalLoc);\n};\n\nEp.setReturnValue = function (valuePath) {\n  t.assertExpression(valuePath.value);\n\n  this.emitAssign(this.contextProperty(\"rval\"), this.explodeExpression(valuePath));\n};\n\nEp.clearPendingException = function (tryLoc, assignee) {\n  t.assertLiteral(tryLoc);\n\n  var catchCall = t.callExpression(this.contextProperty(\"catch\", true), [tryLoc]);\n\n  if (assignee) {\n    this.emitAssign(assignee, catchCall);\n  } else {\n    this.emit(catchCall);\n  }\n};\n\n// Emits code for an unconditional jump to the given location, even if the\n// exact value of the location is not yet known.\nEp.jump = function (toLoc) {\n  this.emitAssign(this.contextProperty(\"next\"), toLoc);\n  this.emit(t.breakStatement());\n};\n\n// Conditional jump.\nEp.jumpIf = function (test, toLoc) {\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n\n  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n};\n\n// Conditional jump, with the condition negated.\nEp.jumpIfNot = function (test, toLoc) {\n  t.assertExpression(test);\n  t.assertLiteral(toLoc);\n\n  var negatedTest = undefined;\n  if (t.isUnaryExpression(test) && test.operator === \"!\") {\n    // Avoid double negation.\n    negatedTest = test.argument;\n  } else {\n    negatedTest = t.unaryExpression(\"!\", test);\n  }\n\n  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty(\"next\"), toLoc), t.breakStatement()])));\n};\n\n// Returns a unique MemberExpression that can be used to store and\n// retrieve temporary values. Since the object of the member expression is\n// the context object, which is presumed to coexist peacefully with all\n// other local variables, and since we just increment `nextTempId`\n// monotonically, uniqueness is assured.\nEp.makeTempVar = function () {\n  return this.contextProperty(\"t\" + this.nextTempId++);\n};\n\nEp.getContextFunction = function (id) {\n  return t.functionExpression(id || null, /*Anonymous*/\n  [this.contextId], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!\n  false // Nor an expression.\n  );\n};\n\n// Turns this.listing into a loop of the form\n//\n//   while (1) switch (context.next) {\n//   case 0:\n//   ...\n//   case n:\n//     return context.stop();\n//   }\n//\n// Each marked location in this.listing will correspond to one generated\n// case statement.\nEp.getDispatchLoop = function () {\n  var self = this;\n  var cases = [];\n  var current = undefined;\n\n  // If we encounter a break, continue, or return statement in a switch\n  // case, we can skip the rest of the statements until the next case.\n  var alreadyEnded = false;\n\n  self.listing.forEach(function (stmt, i) {\n    if (self.marked.hasOwnProperty(i)) {\n      cases.push(t.switchCase(t.numericLiteral(i), current = []));\n      alreadyEnded = false;\n    }\n\n    if (!alreadyEnded) {\n      current.push(stmt);\n      if (t.isCompletionStatement(stmt)) alreadyEnded = true;\n    }\n  });\n\n  // Now that we know how many statements there will be in this.listing,\n  // we can finally resolve this.finalLoc.value.\n  this.finalLoc.value = this.listing.length;\n\n  cases.push(t.switchCase(this.finalLoc, [\n    // Intentionally fall through to the \"end\" case...\n  ]),\n\n  // So that the runtime can jump to the final location without having\n  // to know its offset, we provide the \"end\" case as a synonym.\n  t.switchCase(t.stringLiteral(\"end\"), [\n  // This will check/clear both context.thrown and context.rval.\n  t.returnStatement(t.callExpression(this.contextProperty(\"stop\"), []))]));\n\n  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression(\"=\", this.contextProperty(\"prev\"), this.contextProperty(\"next\")), cases));\n};\n\nEp.getTryLocsList = function () {\n  if (this.tryEntries.length === 0) {\n    // To avoid adding a needless [] to the majority of runtime.wrap\n    // argument lists, force the caller to handle this case specially.\n    return null;\n  }\n\n  var lastLocValue = 0;\n\n  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {\n    var thisLocValue = tryEntry.firstLoc.value;\n    _assert2[\"default\"].ok(thisLocValue >= lastLocValue, \"try entries out of order\");\n    lastLocValue = thisLocValue;\n\n    var ce = tryEntry.catchEntry;\n    var fe = tryEntry.finallyEntry;\n\n    var locs = [tryEntry.firstLoc,\n    // The null here makes a hole in the array.\n    ce ? ce.firstLoc : null];\n\n    if (fe) {\n      locs[2] = fe.firstLoc;\n      locs[3] = fe.afterLoc;\n    }\n\n    return t.arrayExpression(locs);\n  }));\n};\n\n// All side effects must be realized in order.\n\n// If any subexpression harbors a leap, all subexpressions must be\n// neutered of side effects.\n\n// No destructive modification of AST nodes.\n\nEp.explode = function (path, ignoreResult) {\n  var node = path.node;\n  var self = this;\n\n  t.assertNode(node);\n\n  if (t.isDeclaration(node)) throw getDeclError(node);\n\n  if (t.isStatement(node)) return self.explodeStatement(path);\n\n  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);\n\n  switch (node.type) {\n    case \"Program\":\n      return path.get(\"body\").map(self.explodeStatement, self);\n\n    case \"VariableDeclarator\":\n      throw getDeclError(node);\n\n    // These node types should be handled by their parent nodes\n    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).\n    case \"Property\":\n    case \"SwitchCase\":\n    case \"CatchClause\":\n      throw new Error(node.type + \" nodes should be handled by their parents\");\n\n    default:\n      throw new Error(\"unknown Node of type \" + JSON.stringify(node.type));\n  }\n};\n\nfunction getDeclError(node) {\n  return new Error(\"all declarations should have been transformed into \" + \"assignments before the Exploder began its work: \" + JSON.stringify(node));\n}\n\nEp.explodeStatement = function (path, labelId) {\n  var stmt = path.node;\n  var self = this;\n  var before = undefined,\n      after = undefined,\n      head = undefined;\n\n  t.assertStatement(stmt);\n\n  if (labelId) {\n    t.assertIdentifier(labelId);\n  } else {\n    labelId = null;\n  }\n\n  // Explode BlockStatement nodes even if they do not contain a yield,\n  // because we don't want or need the curly braces.\n  if (t.isBlockStatement(stmt)) {\n    path.get(\"body\").forEach(function (path) {\n      self.explodeStatement(path);\n    });\n    return;\n  }\n\n  if (!meta.containsLeap(stmt)) {\n    // Technically we should be able to avoid emitting the statement\n    // altogether if !meta.hasSideEffects(stmt), but that leads to\n    // confusing generated code (for instance, `while (true) {}` just\n    // disappears) and is probably a more appropriate job for a dedicated\n    // dead code elimination pass.\n    self.emit(stmt);\n    return;\n  }\n\n  switch (stmt.type) {\n    case \"ExpressionStatement\":\n      self.explodeExpression(path.get(\"expression\"), true);\n      break;\n\n    case \"LabeledStatement\":\n      after = loc();\n\n      // Did you know you can break from any labeled block statement or\n      // control structure? Well, you can! Note: when a labeled loop is\n      // encountered, the leap.LabeledEntry created here will immediately\n      // enclose a leap.LoopEntry on the leap manager's stack, and both\n      // entries will have the same label. Though this works just fine, it\n      // may seem a bit redundant. In theory, we could check here to\n      // determine if stmt knows how to handle its own label; for example,\n      // stmt happens to be a WhileStatement and so we know it's going to\n      // establish its own LoopEntry when we explode it (below). Then this\n      // LabeledEntry would be unnecessary. Alternatively, we might be\n      // tempted not to pass stmt.label down into self.explodeStatement,\n      // because we've handled the label here, but that's a mistake because\n      // labeled loops may contain labeled continue statements, which is not\n      // something we can handle in this generic case. All in all, I think a\n      // little redundancy greatly simplifies the logic of this case, since\n      // it's clear that we handle all possible LabeledStatements correctly\n      // here, regardless of whether they interact with the leap manager\n      // themselves. Also remember that labels and break/continue-to-label\n      // statements are rare, and all of this logic happens at transform\n      // time, so it has no additional runtime cost.\n      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {\n        self.explodeStatement(path.get(\"body\"), stmt.label);\n      });\n\n      self.mark(after);\n\n      break;\n\n    case \"WhileStatement\":\n      before = loc();\n      after = loc();\n\n      self.mark(before);\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n      self.jump(before);\n      self.mark(after);\n\n      break;\n\n    case \"DoWhileStatement\":\n      var first = loc();\n      var test = loc();\n      after = loc();\n\n      self.mark(first);\n      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {\n        self.explode(path.get(\"body\"));\n      });\n      self.mark(test);\n      self.jumpIf(self.explodeExpression(path.get(\"test\")), first);\n      self.mark(after);\n\n      break;\n\n    case \"ForStatement\":\n      head = loc();\n      var update = loc();\n      after = loc();\n\n      if (stmt.init) {\n        // We pass true here to indicate that if stmt.init is an expression\n        // then we do not care about its result.\n        self.explode(path.get(\"init\"), true);\n      }\n\n      self.mark(head);\n\n      if (stmt.test) {\n        self.jumpIfNot(self.explodeExpression(path.get(\"test\")), after);\n      } else {\n        // No test means continue unconditionally.\n      }\n\n      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n\n      self.mark(update);\n\n      if (stmt.update) {\n        // We pass true here to indicate that if stmt.update is an\n        // expression then we do not care about its result.\n        self.explode(path.get(\"update\"), true);\n      }\n\n      self.jump(head);\n\n      self.mark(after);\n\n      break;\n\n    case \"TypeCastExpression\":\n      return self.explodeExpression(path.get(\"expression\"));\n\n    case \"ForInStatement\":\n      head = loc();\n      after = loc();\n\n      var keyIterNextFn = self.makeTempVar();\n      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty(\"keys\"), [self.explodeExpression(path.get(\"right\"))]));\n\n      self.mark(head);\n\n      var keyInfoTmpVar = self.makeTempVar();\n      self.jumpIf(t.memberExpression(t.assignmentExpression(\"=\", keyInfoTmpVar, t.callExpression(keyIterNextFn, [])), t.identifier(\"done\"), false), after);\n\n      self.emitAssign(stmt.left, t.memberExpression(keyInfoTmpVar, t.identifier(\"value\"), false));\n\n      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {\n        self.explodeStatement(path.get(\"body\"));\n      });\n\n      self.jump(head);\n\n      self.mark(after);\n\n      break;\n\n    case \"BreakStatement\":\n      self.emitAbruptCompletion({\n        type: \"break\",\n        target: self.leapManager.getBreakLoc(stmt.label)\n      });\n\n      break;\n\n    case \"ContinueStatement\":\n      self.emitAbruptCompletion({\n        type: \"continue\",\n        target: self.leapManager.getContinueLoc(stmt.label)\n      });\n\n      break;\n\n    case \"SwitchStatement\":\n      // Always save the discriminant into a temporary variable in case the\n      // test expressions overwrite values like context.sent.\n      var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get(\"discriminant\")));\n\n      after = loc();\n      var defaultLoc = loc();\n      var condition = defaultLoc;\n      var caseLocs = [];\n\n      // If there are no cases, .cases might be undefined.\n      var cases = stmt.cases || [];\n\n      for (var i = cases.length - 1; i >= 0; --i) {\n        var c = cases[i];\n        t.assertSwitchCase(c);\n\n        if (c.test) {\n          condition = t.conditionalExpression(t.binaryExpression(\"===\", disc, c.test), caseLocs[i] = loc(), condition);\n        } else {\n          caseLocs[i] = defaultLoc;\n        }\n      }\n\n      var discriminant = path.get(\"discriminant\");\n      discriminant.replaceWith(condition);\n      self.jump(self.explodeExpression(discriminant));\n\n      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {\n        path.get(\"cases\").forEach(function (casePath) {\n          var i = casePath.key;\n          self.mark(caseLocs[i]);\n\n          casePath.get(\"consequent\").forEach(function (path) {\n            self.explodeStatement(path);\n          });\n        });\n      });\n\n      self.mark(after);\n      if (defaultLoc.value === -1) {\n        self.mark(defaultLoc);\n        _assert2[\"default\"].strictEqual(after.value, defaultLoc.value);\n      }\n\n      break;\n\n    case \"IfStatement\":\n      var elseLoc = stmt.alternate && loc();\n      after = loc();\n\n      self.jumpIfNot(self.explodeExpression(path.get(\"test\")), elseLoc || after);\n\n      self.explodeStatement(path.get(\"consequent\"));\n\n      if (elseLoc) {\n        self.jump(after);\n        self.mark(elseLoc);\n        self.explodeStatement(path.get(\"alternate\"));\n      }\n\n      self.mark(after);\n\n      break;\n\n    case \"ReturnStatement\":\n      self.emitAbruptCompletion({\n        type: \"return\",\n        value: self.explodeExpression(path.get(\"argument\"))\n      });\n\n      break;\n\n    case \"WithStatement\":\n      throw new Error(\"WithStatement not supported in generator functions.\");\n\n    case \"TryStatement\":\n      after = loc();\n\n      var handler = stmt.handler;\n\n      var catchLoc = handler && loc();\n      var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);\n\n      var finallyLoc = stmt.finalizer && loc();\n      var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);\n\n      var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);\n\n      self.tryEntries.push(tryEntry);\n      self.updateContextPrevLoc(tryEntry.firstLoc);\n\n      self.leapManager.withEntry(tryEntry, function () {\n        self.explodeStatement(path.get(\"block\"));\n\n        if (catchLoc) {\n          (function () {\n            if (finallyLoc) {\n              // If we have both a catch block and a finally block, then\n              // because we emit the catch block first, we need to jump over\n              // it to the finally block.\n              self.jump(finallyLoc);\n            } else {\n              // If there is no finally block, then we need to jump over the\n              // catch block to the fall-through location.\n              self.jump(after);\n            }\n\n            self.updateContextPrevLoc(self.mark(catchLoc));\n\n            var bodyPath = path.get(\"handler.body\");\n            var safeParam = self.makeTempVar();\n            self.clearPendingException(tryEntry.firstLoc, safeParam);\n\n            bodyPath.traverse(catchParamVisitor, {\n              safeParam: safeParam,\n              catchParamName: handler.param.name\n            });\n\n            self.leapManager.withEntry(catchEntry, function () {\n              self.explodeStatement(bodyPath);\n            });\n          })();\n        }\n\n        if (finallyLoc) {\n          self.updateContextPrevLoc(self.mark(finallyLoc));\n\n          self.leapManager.withEntry(finallyEntry, function () {\n            self.explodeStatement(path.get(\"finalizer\"));\n          });\n\n          self.emit(t.returnStatement(t.callExpression(self.contextProperty(\"finish\"), [finallyEntry.firstLoc])));\n        }\n      });\n\n      self.mark(after);\n\n      break;\n\n    case \"ThrowStatement\":\n      self.emit(t.throwStatement(self.explodeExpression(path.get(\"argument\"))));\n\n      break;\n\n    default:\n      throw new Error(\"unknown Statement of type \" + JSON.stringify(stmt.type));\n  }\n};\n\nvar catchParamVisitor = {\n  Identifier: function Identifier(path, state) {\n    if (path.node.name === state.catchParamName && util.isReference(path)) {\n      path.replaceWith(state.safeParam);\n    }\n  },\n\n  Scope: function Scope(path, state) {\n    if (path.scope.hasOwnBinding(state.catchParamName)) {\n      // Don't descend into nested scopes that shadow the catch\n      // parameter with their own declarations.\n      path.skip();\n    }\n  }\n};\n\nEp.emitAbruptCompletion = function (record) {\n  if (!isValidCompletion(record)) {\n    _assert2[\"default\"].ok(false, \"invalid completion record: \" + JSON.stringify(record));\n  }\n\n  _assert2[\"default\"].notStrictEqual(record.type, \"normal\", \"normal completions are not abrupt\");\n\n  var abruptArgs = [t.stringLiteral(record.type)];\n\n  if (record.type === \"break\" || record.type === \"continue\") {\n    t.assertLiteral(record.target);\n    abruptArgs[1] = record.target;\n  } else if (record.type === \"return\" || record.type === \"throw\") {\n    if (record.value) {\n      t.assertExpression(record.value);\n      abruptArgs[1] = record.value;\n    }\n  }\n\n  this.emit(t.returnStatement(t.callExpression(this.contextProperty(\"abrupt\"), abruptArgs)));\n};\n\nfunction isValidCompletion(record) {\n  var type = record.type;\n\n  if (type === \"normal\") {\n    return !hasOwn.call(record, \"target\");\n  }\n\n  if (type === \"break\" || type === \"continue\") {\n    return !hasOwn.call(record, \"value\") && t.isLiteral(record.target);\n  }\n\n  if (type === \"return\" || type === \"throw\") {\n    return hasOwn.call(record, \"value\") && !hasOwn.call(record, \"target\");\n  }\n\n  return false;\n}\n\n// Not all offsets into emitter.listing are potential jump targets. For\n// example, execution typically falls into the beginning of a try block\n// without jumping directly there. This method returns the current offset\n// without marking it, so that a switch case will not necessarily be\n// generated for this offset (I say \"not necessarily\" because the same\n// location might end up being marked in the process of emitting other\n// statements). There's no logical harm in marking such locations as jump\n// targets, but minimizing the number of switch cases keeps the generated\n// code shorter.\nEp.getUnmarkedCurrentLoc = function () {\n  return t.numericLiteral(this.listing.length);\n};\n\n// The context.prev property takes the value of context.next whenever we\n// evaluate the switch statement discriminant, which is generally good\n// enough for tracking the last location we jumped to, but sometimes\n// context.prev needs to be more precise, such as when we fall\n// successfully out of a try block and into a finally block without\n// jumping. This method exists to update context.prev to the freshest\n// available location. If we were implementing a full interpreter, we\n// would know the location of the current instruction with complete\n// precision at all times, but we don't have that luxury here, as it would\n// be costly and verbose to set context.prev before every statement.\nEp.updateContextPrevLoc = function (loc) {\n  if (loc) {\n    t.assertLiteral(loc);\n\n    if (loc.value === -1) {\n      // If an uninitialized location literal was passed in, set its value\n      // to the current this.listing.length.\n      loc.value = this.listing.length;\n    } else {\n      // Otherwise assert that the location matches the current offset.\n      _assert2[\"default\"].strictEqual(loc.value, this.listing.length);\n    }\n  } else {\n    loc = this.getUnmarkedCurrentLoc();\n  }\n\n  // Make sure context.prev is up to date in case we fell into this try\n  // statement without jumping to it. TODO Consider avoiding this\n  // assignment when we know control must have jumped here.\n  this.emitAssign(this.contextProperty(\"prev\"), loc);\n};\n\nEp.explodeExpression = function (path, ignoreResult) {\n  var expr = path.node;\n  if (expr) {\n    t.assertExpression(expr);\n  } else {\n    return expr;\n  }\n\n  var self = this;\n  var result = undefined; // Used optionally by several cases below.\n  var after = undefined;\n\n  function finish(expr) {\n    t.assertExpression(expr);\n    if (ignoreResult) {\n      self.emit(expr);\n    } else {\n      return expr;\n    }\n  }\n\n  // If the expression does not contain a leap, then we either emit the\n  // expression as a standalone statement or return it whole.\n  if (!meta.containsLeap(expr)) {\n    return finish(expr);\n  }\n\n  // If any child contains a leap (such as a yield or labeled continue or\n  // break statement), then any sibling subexpressions will almost\n  // certainly have to be exploded in order to maintain the order of their\n  // side effects relative to the leaping child(ren).\n  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);\n\n  // In order to save the rest of explodeExpression from a combinatorial\n  // trainwreck of special cases, explodeViaTempVar is responsible for\n  // deciding when a subexpression needs to be \"exploded,\" which is my\n  // very technical term for emitting the subexpression as an assignment\n  // to a temporary variable and the substituting the temporary variable\n  // for the original subexpression. Think of exploded view diagrams, not\n  // Michael Bay movies. The point of exploding subexpressions is to\n  // control the precise order in which the generated code realizes the\n  // side effects of those subexpressions.\n  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {\n    _assert2[\"default\"].ok(!ignoreChildResult || !tempVar, \"Ignoring the result of a child expression but forcing it to \" + \"be assigned to a temporary variable?\");\n\n    var result = self.explodeExpression(childPath, ignoreChildResult);\n\n    if (ignoreChildResult) {\n      // Side effects already emitted above.\n\n    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {\n        // If tempVar was provided, then the result will always be assigned\n        // to it, even if the result does not otherwise need to be assigned\n        // to a temporary variable.  When no tempVar is provided, we have\n        // the flexibility to decide whether a temporary variable is really\n        // necessary.  Unfortunately, in general, a temporary variable is\n        // required whenever any child contains a yield expression, since it\n        // is difficult to prove (at all, let alone efficiently) whether\n        // this result would evaluate to the same value before and after the\n        // yield (see #206).  One narrow case where we can prove it doesn't\n        // matter (and thus we do not need a temporary variable) is when the\n        // result in question is a Literal value.\n        result = self.emitAssign(tempVar || self.makeTempVar(), result);\n      }\n    return result;\n  }\n\n  // If ignoreResult is true, then we must take full responsibility for\n  // emitting the expression with all its side effects, and we should not\n  // return a result.\n\n  switch (expr.type) {\n    case \"MemberExpression\":\n      return finish(t.memberExpression(self.explodeExpression(path.get(\"object\")), expr.computed ? explodeViaTempVar(null, path.get(\"property\")) : expr.property, expr.computed));\n\n    case \"CallExpression\":\n      var calleePath = path.get(\"callee\");\n      var argsPath = path.get(\"arguments\");\n\n      var newCallee = undefined;\n      var newArgs = [];\n\n      var hasLeapingArgs = false;\n      argsPath.forEach(function (argPath) {\n        hasLeapingArgs = hasLeapingArgs || meta.containsLeap(argPath.node);\n      });\n\n      if (t.isMemberExpression(calleePath.node)) {\n        if (hasLeapingArgs) {\n          // If the arguments of the CallExpression contained any yield\n          // expressions, then we need to be sure to evaluate the callee\n          // before evaluating the arguments, but if the callee was a member\n          // expression, then we must be careful that the object of the\n          // member expression still gets bound to `this` for the call.\n\n          var newObject = explodeViaTempVar(\n          // Assign the exploded callee.object expression to a temporary\n          // variable so that we can use it twice without reevaluating it.\n          self.makeTempVar(), calleePath.get(\"object\"));\n\n          var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get(\"property\")) : calleePath.node.property;\n\n          newArgs.unshift(newObject);\n\n          newCallee = t.memberExpression(t.memberExpression(newObject, newProperty, calleePath.node.computed), t.identifier(\"call\"), false);\n        } else {\n          newCallee = self.explodeExpression(calleePath);\n        }\n      } else {\n        newCallee = self.explodeExpression(calleePath);\n\n        if (t.isMemberExpression(newCallee)) {\n          // If the callee was not previously a MemberExpression, then the\n          // CallExpression was \"unqualified,\" meaning its `this` object\n          // should be the global object. If the exploded expression has\n          // become a MemberExpression (e.g. a context property, probably a\n          // temporary variable), then we need to force it to be unqualified\n          // by using the (0, object.property)(...) trick; otherwise, it\n          // will receive the object of the MemberExpression as its `this`\n          // object.\n          newCallee = t.sequenceExpression([t.numericLiteral(0), newCallee]);\n        }\n      }\n\n      argsPath.forEach(function (argPath) {\n        newArgs.push(explodeViaTempVar(null, argPath));\n      });\n\n      return finish(t.callExpression(newCallee, newArgs));\n\n    case \"NewExpression\":\n      return finish(t.newExpression(explodeViaTempVar(null, path.get(\"callee\")), path.get(\"arguments\").map(function (argPath) {\n        return explodeViaTempVar(null, argPath);\n      })));\n\n    case \"ObjectExpression\":\n      return finish(t.objectExpression(path.get(\"properties\").map(function (propPath) {\n        if (propPath.isObjectProperty()) {\n          return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get(\"value\")), propPath.node.computed);\n        } else {\n          return propPath.node;\n        }\n      })));\n\n    case \"ArrayExpression\":\n      return finish(t.arrayExpression(path.get(\"elements\").map(function (elemPath) {\n        return explodeViaTempVar(null, elemPath);\n      })));\n\n    case \"SequenceExpression\":\n      var lastIndex = expr.expressions.length - 1;\n\n      path.get(\"expressions\").forEach(function (exprPath) {\n        if (exprPath.key === lastIndex) {\n          result = self.explodeExpression(exprPath, ignoreResult);\n        } else {\n          self.explodeExpression(exprPath, true);\n        }\n      });\n\n      return result;\n\n    case \"LogicalExpression\":\n      after = loc();\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      var left = explodeViaTempVar(result, path.get(\"left\"));\n\n      if (expr.operator === \"&&\") {\n        self.jumpIfNot(left, after);\n      } else {\n        _assert2[\"default\"].strictEqual(expr.operator, \"||\");\n        self.jumpIf(left, after);\n      }\n\n      explodeViaTempVar(result, path.get(\"right\"), ignoreResult);\n\n      self.mark(after);\n\n      return result;\n\n    case \"ConditionalExpression\":\n      var elseLoc = loc();\n      after = loc();\n      var test = self.explodeExpression(path.get(\"test\"));\n\n      self.jumpIfNot(test, elseLoc);\n\n      if (!ignoreResult) {\n        result = self.makeTempVar();\n      }\n\n      explodeViaTempVar(result, path.get(\"consequent\"), ignoreResult);\n      self.jump(after);\n\n      self.mark(elseLoc);\n      explodeViaTempVar(result, path.get(\"alternate\"), ignoreResult);\n\n      self.mark(after);\n\n      return result;\n\n    case \"UnaryExpression\":\n      return finish(t.unaryExpression(expr.operator,\n      // Can't (and don't need to) break up the syntax of the argument.\n      // Think about delete a[b].\n      self.explodeExpression(path.get(\"argument\")), !!expr.prefix));\n\n    case \"BinaryExpression\":\n      return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get(\"left\")), explodeViaTempVar(null, path.get(\"right\"))));\n\n    case \"AssignmentExpression\":\n      return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get(\"left\")), self.explodeExpression(path.get(\"right\"))));\n\n    case \"UpdateExpression\":\n      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get(\"argument\")), expr.prefix));\n\n    case \"YieldExpression\":\n      after = loc();\n      var arg = expr.argument && self.explodeExpression(path.get(\"argument\"));\n\n      if (arg && expr.delegate) {\n        var _result = self.makeTempVar();\n\n        self.emit(t.returnStatement(t.callExpression(self.contextProperty(\"delegateYield\"), [arg, t.stringLiteral(_result.property.name), after])));\n\n        self.mark(after);\n\n        return _result;\n      }\n\n      self.emitAssign(self.contextProperty(\"next\"), after);\n      self.emit(t.returnStatement(arg || null));\n      self.mark(after);\n\n      return self.contextProperty(\"sent\");\n\n    default:\n      throw new Error(\"unknown Expression of type \" + JSON.stringify(expr.type));\n  }\n};"]}